<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy_octopus</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_par_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
hp = 1;
damage = 1;

vx = 1; 
vy = 1;
xChange = 0;
yChange = 0;
guessing = false;

var guessSpeed; //1 for right/left, 0 for up/down
var collisionType; //1 for right/left, 0 for up/down
randomMotion = false;
randomCounter = 0;
randomDir = 0;
image_speed = .1;
enemy_collision = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp == 0) {
    if (irandom(11) == 0) instance_create(x,y,obj_powerup);
    instance_destroy();
}

if ((irandom(299) == 0) &amp;&amp; !randomMotion) {
    randomMotion = true;
    randomDir = irandom(3);
    
}

if (!guessing &amp;&amp; !randomMotion) {

    if (abs(x - obj_player.x) &gt; abs(y - obj_player.y)) {
        xChange = -1 * sign(x - obj_player.x) * vx;
        yChange = 0;
    } else {
        yChange = -1 * sign(y - obj_player.y) * vy;
        xChange = 0;
    }
    
    if (place_meeting(x + sign(xChange), y, obj_solid)) {
        xChange = 0;
        yChange = -1 * sign(y - obj_player.y) * vy;
    }
    
    if (place_meeting(x, y + sign(yChange), obj_solid)) {
        yChange = 0;
        xChange = -1 * sign(x - obj_player.x) * vx;
    } 
    
    scr_enemy_self_collision();
    
    if (enemy_collision) {
        xChange = 0;
        yChange = 0;
    }
    
    x += xChange;
    y += yChange;    
    
    if (xChange == 0 &amp;&amp; yChange == 0 &amp;&amp; !enemy_collision) {
    
        guessing = true;
    
        if (irandom(1) == 1) {
            guessSpeed = 1;
        } else {
            guessSpeed = -1;
        }
        
        if (place_meeting(x + 1, y, obj_solid) || place_meeting(x - 1, y, obj_solid)) {
            collisionType = 1;
        } else {
            collisionType = 0;               
        }
                
    }
}

if (guessing &amp;&amp; !randomMotion) {
    if (collisionType == 1) {
        if (!place_meeting(x, y + guessSpeed * 2, obj_solid)) {
            y += guessSpeed;
        } else {guessing = false;}
    } else {
        if (!place_meeting(x + guessSpeed * 2, y, obj_solid)) {
            x += guessSpeed;
        } else {guessing = false;} 
    }
    
    if (!place_meeting(x + 1, y, obj_solid) &amp;&amp; !place_meeting(x - 1, y, obj_solid) &amp;&amp; !place_meeting(x, y + 1, obj_solid) &amp;&amp; !place_meeting(x, y - 1, obj_solid)) {
        guessing = false;
    }
    
}

if (randomMotion) {

    randomCounter++;
    
    //right
    if (randomDir == 0) {
        if (!place_meeting(x + 1, y, obj_solid)) {
            x += 1;
        } else {randomMotion = false;}
    }
    
    //up
    else if (randomDir == 1) {
        if (!place_meeting(x , y - 1, obj_solid)) {
            y -= 1;
        } else {randomMotion = false;}
    }
    
    //left
    else if (randomDir == 2) {
        if (!place_meeting(x - 1, y, obj_solid)) {
            x -= 1;
        } else {randomMotion = false;}
    }   
    
    //down
    else if (randomDir == 3) {
        if (!place_meeting(x , y + 1, obj_solid)) {
            y += 1;
        } else {randomMotion = false;}
    }
    
    if (randomCounter == 60) {
        randomCounter = 0;
        randomMotion = false;
    }
    
}

//guessSpeed; 
//collisionType; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp -= other.damage;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
